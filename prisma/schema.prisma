datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  username        String     @unique
  password_hash   String
  display_name    String?
  profile_image_url String?
  subscription_type String?   @default("free")
  created_at      DateTime   @default(now()) @map("created_at")
  updated_at      DateTime   @default(now()) @map("updated_at")
  last_login_at   DateTime?  @map("last_login_at")
  
  playlists       Playlist[]
  play_history    PlayHistory[]
  user_library    UserLibrary[]
  user_follows    UserFollows[]
  
  @@map("users")
  @@index([email], name: "idx_users_email")
  @@index([username], name: "idx_users_username")
}

model Artist {
  id                String    @id @default(uuid())
  name              String
  bio               String?
  image_url         String?
  verified          Boolean   @default(false)
  monthly_listeners Int       @default(0)
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @default(now()) @map("updated_at")
  
  albums            Album[]
  tracks            Track[]
  user_follows      UserFollows[]
  
  @@map("artists")
}

model Album {
  id              String    @id @default(uuid())
  title           String
  artist_id       String
  artist          Artist    @relation(fields: [artist_id], references: [id])
  release_date    DateTime?
  cover_image_url String?
  album_type      String?   @default("album")
  total_tracks    Int
  duration_ms     Int
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @default(now()) @map("updated_at")
  
  tracks          Track[]
  
  @@map("albums")
  @@index([artist_id], name: "idx_albums_artist_id")
}

model Track {
  id              String    @id @default(uuid())
  title           String
  artist_id       String
  artist          Artist    @relation(fields: [artist_id], references: [id])
  album_id        String?
  album           Album?    @relation(fields: [album_id], references: [id])
  duration_ms     Int
  track_number    Int?
  audio_file_url  String
  cover_image_url String?
  play_count      Int       @default(0)
  explicit        Boolean   @default(false)
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @default(now()) @map("updated_at")
  
  playlist_tracks PlaylistTrack[]
  user_library    UserLibrary[]
  play_history    PlayHistory[]
  
  @@map("tracks")
  @@index([title], name: "idx_tracks_title")
  @@index([artist_id], name: "idx_tracks_artist_id")
  @@index([album_id], name: "idx_tracks_album_id")
}

model Playlist {
  id                String    @id @default(uuid())
  user_id           String
  user              User      @relation(fields: [user_id], references: [id])
  name              String
  description       String?
  cover_image_url   String?
  is_public         Boolean   @default(false)
  track_count       Int       @default(0)
  total_duration_ms Int       @default(0)
  created_at        DateTime  @default(now()) @map("created_at")
  
  playlist_tracks   PlaylistTrack[]
  
  @@map("playlists")
}

model PlaylistTrack {
  id           String   @id @default(uuid())
  playlist_id  String
  playlist     Playlist @relation(fields: [playlist_id], references: [id])
  track_id     String
  track        Track    @relation(fields: [track_id], references: [id])
  position     Int
  added_at     DateTime @default(now()) @map("added_at")
  
  @@map("playlist_tracks")
  @@index([playlist_id], name: "idx_playlist_tracks_playlist_id")
  @@index([playlist_id, position], name: "idx_playlist_tracks_position")
}

model UserLibrary {
  id         String   @id @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  track_id   String
  track      Track    @relation(fields: [track_id], references: [id])
  added_at   DateTime @default(now()) @map("added_at")
  
  @@map("user_library")
  @@index([user_id], name: "idx_user_library_user_id")
}

model PlayHistory {
  id               String   @id @default(uuid())
  user_id          String
  user             User     @relation(fields: [user_id], references: [id])
  track_id         String
  track            Track    @relation(fields: [track_id], references: [id])
  played_at        DateTime @default(now()) @map("played_at")
  play_duration_ms Int
  completed        Boolean  @default(false)
  
  @@map("play_history")
  @@index([user_id], name: "idx_play_history_user_id")
  @@index([played_at], name: "idx_play_history_played_at")
}

model UserFollows {
  id         String   @id @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  artist_id  String
  artist     Artist   @relation(fields: [artist_id], references: [id])
  followed_at DateTime @default(now()) @map("followed_at")
  
  @@map("user_follows")
  @@index([user_id], name: "idx_user_follows_user_id")
}
